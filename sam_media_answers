Question 1: Code critique

The high traffic back-end systems that are in use by Sam Media require robust and quality code.

Please review the following code and list all the coding errors and poor coding practices that you can see in this code. There are at least 10 of them, some very obvious, others sneakily hidden !

function output()
{
	// Check authorization
	if(is_authorized())
	{
		$authorized = true;
		include('/path/to/' . $_REQUEST['module'] . '.php');
	}
	echo "<ul>"
	$conn = mysql_connect( "mysql.foo.org:412", "kum", "overmoon" );
	mysql_select_db( "kum", $conn ); // selects a database
	$q = " SELECT * FROM main WHERE id > " . $_GET["id"]. ";";
	$res = mysql_query( $q, $conn);
	while( $row = mysql_fetch_assoc( $res ) )
	{
		echo "<li>".$row['description']."</li>";
	}
	echo "</ul><br><ul>";
	$q = " SELECT * FROM main WHERE id < " . $_GET["id"]. ";";
	$res = mysql_query( $q, $conn);
	while( $row = mysql_fetch_assoc( $res ) )
	{
		// Display the status if it is authorized, othewise display N/A
		echo "<li>".$row['description']. "(" .
		$authorized ? $row['status'] : "N/A" . ")</li>";
	}
	echo "</ul>";
}

						Answers:

/**
 *@Err1 On Assuming (is_authorized() ) function exists, otherwise will give php error 
 *@Err2 No default value for $authorized    
 *@Err3 No validation on ( include('/path/to/' . $_REQUEST['module'] . '.php'); ), will give a php error if file not exists
 *@Err4 Missing semicolon on ( echo "<ul>" )
 *@Err5 No validation on Database Connection ( $conn = mysql_connect( "mysql.foo.org:412", "kum", "overmoon" ) ). It May cause error if host|username|password is incorrect
 *@Err6 Should be use PDO or MySQLi extensions instead, because it can be used for any major RDBS.
 *@Err7 database credentials should not be hard-coded into the script. It should be include in a secure location (not in htdocs / www folder). Preferably, I would like to encrypt it.
 *@Err8 We Should always write disconnect your database handle once you're done with it. 
 *@Err9 No validation on Database selet statement (  mysql_select_db( "kum", $conn ) ). It May cause error if dbname is incorrect or not there
 *@Err10 No validation on ( $_GET["id"] ) because of SQL Injection.
 *@Err11 Always mention table Column name in SQL Query if its using very less in comparision to all to corresponding table  
 *@Err12 Sql query should not end with semicolon ( $q   = " SELECT * FROM main WHERE id > " . $id . ";"; and $q   = " SELECT * FROM main WHERE id < " . $id . ";";  )
 *@Err13 No validation for Number of record, cause error without row counts>0 
 *@Err14 No validation on  ( $res = mysql_query( $q, $conn); ), may cause "Query failed" with fatal error
 *@Err15 Always PHP Contained variable should be in double Quotes otherwise in single quotes (i.e. $city = 'New Delhi';
$profilestr = "I live in India at  $city."; )
*/



function modify_output(){
    
    #Check If fucntion exists
        if(!function_exists('is_authorized')){
            echo 'function is_authorized() not found';
              return false;
        }
    
    #Check authorization
    $authorized = false;
        if(is_authorized()){
            $module = isset($_REQUEST['module']) ? $_REQUEST['module'] : '';

    #Check Query String has value
        if(empty($module)){
            echo 'Module not found';
              return false;
        }

    #Check If file Exists
        if(!file_exists('/path/to/' . $module . '.php')){
            echo 'Invalid Module or not exist';
              return false;
        }

        $authorized = true;
        include('/path/to/' . $module . '.php');
	}

        $conn = mysql_connect( "mysql.foo.org:412", "kum", "overmoon" );
    
    #Check If Connection is valid
        if (!$conn) {
            echo "Unable to connect to server: " . mysql_error();
            return false;
        }
        
    #selects a database    
        $db = mysql_select_db( "kum", $conn ); 
        
    #Check If database Exists or Incorrect
        if (!$db) {
            echo "Unable to connect to db: " . mysql_error();
            return false;
        }

        $id = isset($_GET["id"]) ? $_GET["id"] : 0;
        
       if(empty($id)){
            echo 'Invalid ID';
            return false;
        }

	$q   = " SELECT * FROM main WHERE id > " . $id . ";";
	$res = mysql_query( $q, $conn);
        
        if (!$res) {
            echo "Query failed " . mysql_error();
            return false;
        }

        echo "<ul>";
            if (mysql_num_rows($res) == 0) {
                echo '<li>No data found</li>';
            }
            else{
                while ($row = mysql_fetch_assoc($res)) {
                    echo "<li>" . $row['description'] . "</li>";
                }
            }
        echo "</ul>";

            $q   = " SELECT * FROM main WHERE id < " . $id . ";";
            $res = mysql_query( $q, $conn);

        if (!$res) {
            echo "Query failed " . mysql_error();
            return false;
        }

        echo "<br/><ul>";
        if (mysql_num_rows($res) == 0) {
            echo '<li>No data found</li>';
        }
        else{
            while( $row = mysql_fetch_assoc( $res ) ){
                echo "<li>".$row['description']. "(" . $authorized ? $row['status'] : "N/A" . ")</li>";
            }
        }
            echo "</ul>";
     #Close Mysql Connection       
     mysql_close($conn);       
}
Question 2: Speed typing !

				Answers2:
question_2.php
<?php
require_once (realpath(dirname(__FILE__)) . 'classTypingSpeed.php');
?>
<html>
<head>
    <title>Sam Media Typing Speed</title>
    <style type="text/css">
        .sam_keyboard {
            font-family: calibri;
            font-size:13px;
            color:#222;
            border-width: 1px;
            border-collapse: collapse;
        }
        .sam_keyboard td {
            border-width: 1px;
            padding: 6px;
            border-style: solid;
            width: 35px;
            background-color: #ffffff;
            text-align: center;
            
        }
    </style>
</head>
<body>
<?php
$objSpTyping = new speedTyping();

$objSpTyping->showKeyboard();

$string = 'QfUJ@!*KL#&[]9`><';
//$string = 'ABZ@1';
echo '<hr />';
echo "Input String : {$string}";
$output  = $objSpTyping->stringConversion($string);


$objSpTyping->getKeyboardPosition($string);
?>
</body>
</html>

classTypingSpeed.php
<?php
/**
 * Description of speedTyping
 * @created 09-Oct-2013  
 * @author Jitendra Gupta <jitendraknp2004@gmail.com>
 */

class speedTyping {
    protected $remoteKeyboard   = array();
    protected $specialchars     = array();
    protected $currX='SAM';
    protected $currY='SAM';
    protected $upkeyPress       = 0;
    protected $downkeyPress     = 0;
    protected $leftkeyPress     = 0;
    protected $rightkeyPress    = 0;
    
    public function __construct() {
        #Show First row of Remote Keyboard
        $remoteKeyboard[0] = range('A', 'Z');

        #Show Second row of Remote Keyboard
        $remoteKeyboard[1] = range('a', 'z');

        #Show Third row of Remote Keyboard
        $row3 = array(
            'EXCLAMATION_POINT',
            'AT_SYMBOL',
            'NUMBER_SIGN',
            'DOLLAR_SIGN',
            'PERCENT_SIGN',
            'CARET',
            'AMPERSAND',
            'ASTERISK',
            'OPENING_PARENTHESIS',
            'CLOSING_PARENTHESIS',
            'QUESTION_MARK',
            'SLASH',
            'VERTICAL_BAR',
            'BACKSLASH',
            'PLUS_SIGN',
            'MINUS_SIGN'
        );
        $remoteKeyboard[2] = array_merge(range('0', '9'), $row3);

        #Show Fourth row of Remote Keyboard
        $row4 = array(
            'GRAVE_ACCENT',
            'TILDE',
            'OPENING_BRACKET',
            'CLOSING_BRACKET',
            'OPENING_BRACE',
            'CLOSING_BRACE',
            'LESS_THAN_SIGN',
            'GREATER_THAN_SIGN',
            'EMPTY_SPACE',
            'SPACE', 'SPACE', 'SPACE', 'SPACE', 'SPACE', 'SPACE', 'SPACE',
            'PERIOD',
            'COMMA',
            'SEMICOLON',
            'COLON',
            'SINGLE_QUOTE',
            'DOUBLE_QUOTES',
            'UNDERSCORE',
            'EQUAL_SIGN',
            'BACKSPACE', 'BACKSPACE'
        );
        $remoteKeyboard[3] = $row4;

       
        $this->remoteKeyboard = $remoteKeyboard;

        $specialchars = array(
            'EXCLAMATION_POINT'     => '&#33',
            'AT_SYMBOL'             => '&#64;',
            'NUMBER_SIGN'           => '&#35;',
            'DOLLAR_SIGN'           => '&#36;',
            'PERCENT_SIGN'          => '&#37;',
            'CARET'                 => '&#94;',
            'AMPERSAND'             => '&#38;',
            'ASTERISK'              => '&#42;',
            'OPENING_PARENTHESIS'   => '&#40;',
            'CLOSING_PARENTHESIS'   => '&#41;',
            'QUESTION_MARK'         => '&#63;',
            'SLASH'                 => '&#47;',
            'VERTICAL_BAR'          => '&#124;',
            'BACKSLASH'             => '&#92;',
            'PLUS_SIGN'             => '&#43;',
            'MINUS_SIGN'            => '&#45;',
            'GRAVE_ACCENT'          => '&#96;',
            'TILDE'                 => '&#126;',
            'OPENING_BRACKET'       => '&#91;',
            'CLOSING_BRACKET'       => '&#93;',
            'OPENING_BRACE'         => '&#123;',
            'CLOSING_BRACE'         => '&#125;',
            'LESS_THAN_SIGN'        => '&#60;',
            'GREATER_THAN_SIGN'     => '&#62;',
            'EMPTY_SPACE'           => '&nbsp;',
            'PERIOD'                => '&#46;',
            'COMMA'                 => '&#44;',
            'SEMICOLON'             => '&#59;',
            'COLON'                 => '&#58;',
            'SINGLE_QUOTE'          => '&#39;',
            'DOUBLE_QUOTES'         => '&#34;',
            'UNDERSCORE'            => '&#95;',
            'EQUAL_SIGN'            => '&#61;',
            'BACKSPACE'             => 'BS'
        );
        $this->specialchars = $specialchars;
    }

    public function showKeyboard(){
        $specialchars = $this->specialchars;
        echo '<table class="sam_keyboard">';
        foreach($this->remoteKeyboard as $row){
            echo '<tr>'  . PHP_EOL;
            $keyCount = count($row);
            for($keyIndex = 0; $keyIndex < $keyCount; $keyIndex++){
                $key = $row[$keyIndex];
                $key = isset($specialchars[$key]) ? $specialchars[$key] : $key;
                echo "<td><b>{$key}</b></td>" . PHP_EOL;
            }
            echo '</tr>' . PHP_EOL;
        }
        echo '</table>';
    }

    public function stringConversion($string){
        $output = str_split($string);
        foreach ($output as $charIndex => $char) {
            if(preg_match('([A-Z]|[a-z]|[0-9])', $char)){
                continue;
            }
            $output[$charIndex] = '&#' . ord($char) . ';';
        }
        return $output;
    }

    public function getKeyboardPosition($string){
        
        $charList      = $this->stringConversion($string);
        $keyboard     = $this->remoteKeyboard;
        $specialchars = $this->specialchars;

        $result = array();
         
        foreach($charList as $char){
            if(is_integer($this->currX) && is_integer($this->currY)){
                $this->cursorMoveMent($this->currX,$this->currY,$char);
            }
            foreach($keyboard as $rowIndex => $row){
                  if($char[0] === '&'){
                        //$row = $specialchars;
                        foreach($specialchars as $spKey=>$spVal)
                        {
                            if($spVal==$char)
                            {
                               
                                foreach($keyboard[2] as $k=>$val)
                                {
                                   if($val===$spKey)
                                    {
                                        echo '<hr />';
                                        echo "<b>Character {$char}</b> Current position of Cursor at Row(2) : Column({$k}) ";
                                        $this->currX  = 2;
                                        $this->currY  = $k;
                                        break 3;
                                    }

                                }
                                foreach($keyboard[3] as $k=>$val)
                                {

                                        if($val===$spKey)
                                        {
                                           // echo "jit2".$k;
                                             echo '<hr />';
                                             echo "<b>Character {$char}</b> Current position of Cursor at Row(3) : Column({$k}) ";
                                             $this->currX  = 3;
                                             $this->currY  = $k;
                                            break 3;
                                        }
                                }
                            }
                        } 
                     }
                else
                {
                    foreach($row as $colIndex => $key){
                        if($key == $char){
                            echo '<hr />';
                             $this->currX = $rowIndex;
                             $this->currY = $colIndex;
                            echo "<b>Character {$key}</b> Current position of Cursor at Row({$rowIndex}) : Column({$colIndex}) ";
                         break 2;
                         }
                    }
               }
        }
        
         
    }
    echo "<br /><b>Total Movement: </b>".($this->upkeyPress+$this->downkeyPress+$this->leftkeyPress+$this->rightkeyPress);
}    
    public function cursorMoveMent($currX,$currY,$nextrchar)
    {
        #get the current cursor character
        $specialchars = $this->specialchars;
        $curchar    = $keyboard[$currX][$currY];
        $diffX      = $currX - $nextcharpos[0];
        $nextcharpos = $this->getCharPosition($nextrchar);
        $diffY =  $currY- $nextcharpos[1];
        
        #For up-down Movement
        if($diffX<0)
        {
            if((in_array($curchar,array('J','K','L','M','N','O','P')) || in_array($curchar,array('Y','Z'))) && $nextcharpos[0]==3)
            {
                   $this->upkeyPress += $nextcharpos[0]-$currX;
            }
            else
            {
                    $this->downkeyPress += $nextcharpos[0]-$currX;
            }
            
        }
        if($diffY>2 && $nextcharpos[0]==0)
        {
           
              $this->downkeyPress += $diffY;
        }
        else
        {
             $this->upkeyPress += $diffY;
        }
        
        #For left-right Movement
        if($diffY<0)
        {
            if($nextcharpos[1]>13)
            {
                $this->leftkeyPress  += $nextcharpos[1]-$currY;
            }
            else {
                $this->rightkeyPress += $nextcharpos[1]-$currY;    
            }
        }
        else
        {
            if($nextcharpos[1]>13)
            {
                $this->rightkeyPress += $diffY;
            }
            else
            {
                $this->leftkeyPress += $diffY;
            }
        }
    }
    
    public function getCharPosition($char)
    {
        $keyboard   = $this->remoteKeyboard; 
        $result     = array();
        if(preg_match('([A-Z]|[a-z]|[0-9])', $char)){
            $convertchar  =   $char;
        }
        else
        {
            $convertchar  = '&#' . ord($char) . ';';
        } 
        foreach($keyboard as $rowIndex => $row){
                  if($convertchar[0] === '&'){
                       foreach($specialchars as $spKey=>$spVal)
                        {
                            if($spVal==$char)
                            {
                                foreach($keyboard[2] as $k=>$val)
                                {
                                   if($val===$spKey)
                                    {
                                       $result = array(2,$k); 
                                       break 3;
                                    }

                                }
                                foreach($keyboard[3] as $k=>$val)
                                {
                                        if($val===$spKey)
                                        {   
                                           $result = array(3,$k);
                                           break 3;
                                        }
                                }
                            }
                        } 
                     }
                else
                {
                    foreach($row as $colIndex => $key){
                        if($key == $convertchar){
                            $result = array($rowIndex,$colIndex);
                            break 2;
                         }
                    }
               }
        }
        return  $result;
    }
    
}

?>


sam_question2TestUnit.php
class speedTypingTest extends PHPUnit_Framework_TestCase
{
		public function validate()
{
	$this->assertEquals('QfUJ@!*KL#&[]9`><','QfUJ@!*KL#&[]9`><');
}
}
